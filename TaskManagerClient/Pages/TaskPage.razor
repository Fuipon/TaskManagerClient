@using Microsoft.AspNetCore.Components.Forms
@using TaskManagerClient.Services;
@using TaskManagerClient.Models;
@page "/tasks"
@inject ApiService ApiService

<h2 class="mb-3 ms-3">Мои задачи</h2>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="newTask" OnValidSubmit="AddTask">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="newTask.Title" 
               class="form-control mb-2" 
               placeholder="Название задачи" />
    
    <InputTextArea @bind-Value="newTask.Description" 
                   class="form-control mb-2" 
                   placeholder="Описание (необязательно)" />

    <button type="submit" class="btn btn-primary ms-3">Добавить задачу</button>
</EditForm>

@if (tasks == null)
{
    <p><em>Загрузка...</em></p>
}
else if (tasks.Count == 0)
{
    <p><em>Нет задач</em></p>
}
else
{
    <ul class="list-group">
        @foreach (var task in tasks)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <input type="checkbox"
                           class="form-check-input me-2"
                           checked="@task.IsCompleted"
                           @onchange="(e) => OnCompletedChanged(e, task)" />
                    <strong>@task.Title</strong>
                    <div class="text-muted">@task.Description</div>
                </div>
                <button class="btn btn-danger btn-sm" @onclick="() => DeleteTask(task.Id)">Удалить</button>
            </li>
        }
    </ul>
}

@code {
    private List<TaskItemDTO>? tasks;
    private TaskItemDTO newTask = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        try
        {
            errorMessage = null;
            tasks = await ApiService.GetTasksAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task AddTask()
    {
        await ApiService.AddTaskAsync(newTask);
        newTask = new TaskItemDTO();
        await LoadTasks();
    }

    private async Task UpdateTask(TaskItemDTO task)
    {
        try
        {
            errorMessage = null;
            await ApiService.UpdateTaskAsync(task);
            await LoadTasks();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DeleteTask(int id)
    {
        try
        {
            errorMessage = null;
            await ApiService.DeleteTaskAsync(id);
            await LoadTasks();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task OnCompletedChanged(ChangeEventArgs e, TaskItemDTO task)
    {
        task.IsCompleted = (bool)e.Value;
        await UpdateTask(task);
    }
}
