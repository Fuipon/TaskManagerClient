@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Вход в систему</h3>

<div>
    <input placeholder="Логин" @bind="username" />
</div>
<div>
    <input placeholder="Пароль" type="password" @bind="password" />
</div>
<div>
    <button @onclick="HandleLogin">Войти</button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}

@code {
    private string username;
    private string password;
    private string errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = "";

        var loginData = new
        {
            Username = username,
            Password = password
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginData);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                    // Сохраняем токен в localStorage
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);

                    // Переходим на страницу задач
                    Navigation.NavigateTo("/tasks");
                }
                else
                {
                    errorMessage = "Ошибка получения токена.";
                }
            }
            else
            {
                errorMessage = "Неверный логин или пароль.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ошибка при подключении к серверу: " + ex.Message;
        }
    }

    class LoginResult
    {
        public string Token { get; set; }
    }
}
